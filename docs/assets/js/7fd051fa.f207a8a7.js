(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[256],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return b}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=l(n),b=i,f=d["".concat(s,".").concat(b)]||d[b]||p[b]||a;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function b(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2588:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return u},default:function(){return d}});var r=n(2122),i=n(9756),a=(n(7294),n(3905)),o=["components"],c={id:"batch-building",title:"Batch Building",description:"How to build batches of objects with a factory",slug:"/usage/batch-building"},s=void 0,l={unversionedId:"Usage/batch-building",id:"Usage/batch-building",isDocsHomePage:!1,title:"Batch Building",description:"How to build batches of objects with a factory",source:"@site/docs/2-Usage/5-batch-building.md",sourceDirName:"2-Usage",slug:"/usage/batch-building",permalink:"/interfaceForge/docs/usage/batch-building",editUrl:"https://github.com/Goldziher/interfaceForge/edit/main/docs/docs/2-Usage/5-batch-building.md",version:"current",sidebarPosition:5,frontMatter:{id:"batch-building",title:"Batch Building",description:"How to build batches of objects with a factory",slug:"/usage/batch-building"},sidebar:"tutorialSidebar",previous:{title:"Building Objects",permalink:"/interfaceForge/docs/usage/building-objects"},next:{title:"Creating and using Fixtures",permalink:"/interfaceForge/docs/usage/creating-and-using-fixtures"}},u=[{value:"Note regarding async",id:"note-regarding-async",children:[]}],p={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"If you need to generate multiple objects at the same time, you can use either ",(0,a.kt)("inlineCode",{parentName:"p"},".batch")," or ",(0,a.kt)("inlineCode",{parentName:"p"},".batchSync")," methods. The\ndifference between the two is that ",(0,a.kt)("inlineCode",{parentName:"p"},".batch")," is async while ",(0,a.kt)("inlineCode",{parentName:"p"},".batchSync")," is not. Thus ",(0,a.kt)("inlineCode",{parentName:"p"},".batch")," returns a promise\nresolving to an array of objects of the given type, and ",(0,a.kt)("inlineCode",{parentName:"p"},".batchSync")," returns the array directly."),(0,a.kt)("p",null,"Both methods accept two parameters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"size"),": the number of objects to create - this is a ",(0,a.kt)("em",{parentName:"li"},"required parameter"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"options"),": the same as for ",(0,a.kt)("a",{parentName:"li",href:"#building-objects"},"the regular build methods"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="User.spec.ts"',title:'"User.spec.ts"'},"describe('User', () => {\n    let users: User[];\n\n    beforeEach(async () => {\n        // you can pass override values when calling build\n        users = await UserFactory.batch(3, {\n            overrides: async (iteration) => ({\n                // ...\n            }),\n            // values: user, iteration: number\n            factory: (values, iteration) => {\n                // ...\n            },\n        });\n    });\n    // ...\n});\n")),(0,a.kt)("h2",{id:"note-regarding-async"},"Note regarding async"),(0,a.kt)("p",null,"If you call ",(0,a.kt)("inlineCode",{parentName:"p"},".buildSync")," or ",(0,a.kt)("inlineCode",{parentName:"p"},".batchSync")," on a factory that has been initialized with async defaults, or while passing\nasync overrides / factory function to the method, an informative error will be thrown."))}d.isMDXComponent=!0}}]);