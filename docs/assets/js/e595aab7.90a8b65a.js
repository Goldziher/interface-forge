(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[65],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||i;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},342:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return d}});var r=n(2122),a=n(9756),i=(n(7294),n(3905)),o=["components"],s={id:"using-generators",title:"Using Generators",description:"Using Generators",slug:"/factory-schema/using-generators"},c=void 0,l={unversionedId:"Schema/using-generators",id:"Schema/using-generators",isDocsHomePage:!1,title:"Using Generators",description:"Using Generators",source:"@site/docs/3-Schema/6-using-generators.md",sourceDirName:"3-Schema",slug:"/factory-schema/using-generators",permalink:"/interfaceForge/docs/factory-schema/using-generators",editUrl:"https://github.com/Goldziher/interfaceForge/edit/main/docs/docs/3-Schema/6-using-generators.md",version:"current",sidebarPosition:6,frontMatter:{id:"using-generators",title:"Using Generators",description:"Using Generators",slug:"/factory-schema/using-generators"},sidebar:"tutorialSidebar",previous:{title:"Designating a property as derived",permalink:"/interfaceForge/docs/factory-schema/designating-a-property-as-derived"},next:{title:"Contributing",permalink:"/interfaceForge/docs/contributing"}},u=[{value:"The .iterate method",id:"the-iterate-method",children:[]},{value:"The .sample method",id:"the-sample-method",children:[]}],p={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"You can place\na ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*"},"generator function")," as a\nfactory schema value. At build-time, the generator's ",(0,i.kt)("inlineCode",{parentName:"p"},".next")," method will be called. You should be careful. though, when\ndoing this: The generator function does not return or yield ",(0,i.kt)("inlineCode",{parentName:"p"},"{done: true}")," during build-time."),(0,i.kt)("p",null,"There are two built-in convenience static methods that create ",(0,i.kt)("em",{parentName:"p"},"infinite")," generators: ",(0,i.kt)("inlineCode",{parentName:"p"},".iterate")," and ",(0,i.kt)("inlineCode",{parentName:"p"},".sample"),". Both\nmethods accept an ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols"},"iterable")," as a\nvalue, e.g. an Array, Set, Map etc."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE")," do not pass an infinite iterator to these builtin methods: It will create an infinite loop."),(0,i.kt)("h2",{id:"the-iterate-method"},"The .iterate method"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"iterate")," static method to create an infinite iterator that yields the values passed to it serially. Each\ntime ",(0,i.kt)("inlineCode",{parentName:"p"},".next")," is called, the next value in the iterator is returned. When reaching the iterator's end, iteration will\nbegin from position 0 again:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="factories.ts"',title:'"factories.ts"'},"const UserFactory = new TypeFactory<User>({\n    firstName: TypeFactory.iterate(['John', 'Bob']),\n    // ...\n});\n\ndescribe('User', () => {\n    let user1: User;\n    let user2: User;\n\n    beforeEach(async () => {\n        user1 = await UserFactory.build();\n        // user == {\n        //     firstName: \"John\",\n        //     ...\n        // }\n        user2 = await UserFactory.build();\n        // user == {\n        //     firstName: \"Bob\",\n        //     ...\n        // }\n        user3 = await UserFactory.build();\n        // user == {\n        //     firstName: \"John\",\n        //     ...\n        // }\n    });\n    // ...\n});\n")),(0,i.kt)("h2",{id:"the-sample-method"},"The .sample method"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"sample")," static method to create an infinite iterator that returns a random value each time its called. If the\niterator contains more than one item, the current and previous values are guaranteed to be different."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="factories.ts"',title:'"factories.ts"'},"const UserFactory = new TypeFactory<User>({\n    firstName: TypeFactory.sample([\n        'John',\n        'Bob',\n        'Will',\n        'Mary',\n        'Sue',\n        'Willma',\n    ]),\n    // ...\n});\n\ndescribe('User', () => {\n    let user1: User;\n    let user2: User;\n\n    beforeEach(async () => {\n        user1 = await UserFactory.build();\n        // user == {\n        //     firstName: \"Sue\",\n        //     ...\n        // }\n        user2 = await UserFactory.build();\n        // user == {\n        //     firstName: \"Will\",\n        //     ...\n        // }\n    });\n    // ...\n});\n")))}d.isMDXComponent=!0}}]);